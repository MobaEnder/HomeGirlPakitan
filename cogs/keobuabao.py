import discord
from discord import app_commands
from discord.ext import commands
import asyncio, random

from utils.data import get_user, save_data, DATA

CHOICES = {
    "‚úåÔ∏è K√©o": "scissors",
    "‚úä B√∫a": "rock",
    "‚úã Bao": "paper"
}

RESULTS = {
    ("rock", "scissors"): 1,
    ("scissors", "paper"): 1,
    ("paper", "rock"): 1,
    ("scissors", "rock"): 2,
    ("paper", "scissors"): 2,
    ("rock", "paper"): 2,
}

class KeoBuaBao(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @app_commands.command(name="keobuabao", description="‚úåÔ∏è‚úä‚úã Ch∆°i K√©o-B√∫a-Bao v·ªõi nh√† c√°i ho·∫∑c ng∆∞·ªùi ch∆°i kh√°c")
    @app_commands.describe(bet="S·ªë ti·ªÅn c∆∞·ª£c", opponent="ƒê·ªëi th·ªß (ƒë·ªÉ tr·ªëng n·∫øu mu·ªën ch∆°i v·ªõi nh√† c√°i)")
    async def keobuabao(self, interaction: discord.Interaction, bet: int, opponent: discord.Member = None):
        user_id = interaction.user.id
        user_data = get_user(DATA, user_id)

        if bet <= 0:
            return await interaction.response.send_message("‚ùå S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0!", ephemeral=True)
        if user_data["money"] < bet:
            return await interaction.response.send_message("üí∏ B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ª£c!", ephemeral=True)

        if opponent and opponent.id == user_id:
            return await interaction.response.send_message("‚ùå B·∫°n kh√¥ng th·ªÉ ch∆°i v·ªõi ch√≠nh m√¨nh!", ephemeral=True)

        if opponent:  # ch∆°i v·ªõi ng∆∞·ªùi
            opp_data = get_user(DATA, opponent.id)
            if opp_data["money"] < bet:
                return await interaction.response.send_message(f"‚ùå {opponent.mention} kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ c∆∞·ª£c!", ephemeral=True)
        else:
            opp_data = None

        embed = discord.Embed(
            title="‚úåÔ∏è‚úä‚úã K√©o - B√∫a - Bao",
            description=(
                f"üíº Ti·ªÅn c∆∞·ª£c: **{bet:,} xu**\n"
                f"üëë Ng∆∞·ªùi ch∆°i: {interaction.user.mention}\n"
                f"ü§ñ ƒê·ªëi th·ªß: {opponent.mention if opponent else 'Nh√† c√°i'}\n\n"
                f"H√£y ch·ªçn ƒëi n√†o!"
            ),
            color=discord.Color.orange()
        )

        class ChoiceView(discord.ui.View):
            def __init__(self):
                super().__init__(timeout=15)
                self.choice = None

            async def handle_choice(self, interaction_btn: discord.Interaction, choice: str):
                if interaction_btn.user.id != user_id:
                    return await interaction_btn.response.send_message("‚õî Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!", ephemeral=True)
                self.choice = choice
                for child in self.children:
                    child.disabled = True
                await interaction_btn.response.edit_message(content=f"‚úÖ B·∫°n ƒë√£ ch·ªçn **{choice}**", view=self)
                self.stop()

            @discord.ui.button(label="‚úåÔ∏è K√©o", style=discord.ButtonStyle.primary)
            async def scissors(self, i, b):
                await self.handle_choice(i, "scissors")

            @discord.ui.button(label="‚úä B√∫a", style=discord.ButtonStyle.primary)
            async def rock(self, i, b):
                await self.handle_choice(i, "rock")

            @discord.ui.button(label="‚úã Bao", style=discord.ButtonStyle.primary)
            async def paper(self, i, b):
                await self.handle_choice(i, "paper")

        view = ChoiceView()
        await interaction.response.send_message(embed=embed, view=view)
        message = await interaction.original_response()
        await view.wait()

        if not view.choice:
            return await message.edit(content="‚è≥ H·∫øt th·ªùi gian ch·ªçn! Tr·∫≠n ƒë·∫•u b·ªã h·ªßy.", embed=None, view=None)

        player_choice = view.choice
        opponent_choice = None

        if opponent:  # ch∆°i v·ªõi ng∆∞·ªùi
            opponent_choice = random.choice(["rock", "paper", "scissors"])  # gi·∫£ l·∫≠p ƒë·ªëi th·ªß auto ch·ªçn
        else:  # nh√† c√°i
            opponent_choice = random.choice(["rock", "paper", "scissors"])

        # animation 3s
        anim_icons = ["‚úåÔ∏è", "‚úä", "‚úã"]
        for _ in range(3):
            await asyncio.sleep(1)
            await message.edit(content=f"‚è≥ Tung... {random.choice(anim_icons)}")

        # K·∫øt qu·∫£
        result = None
        if player_choice == opponent_choice:
            result = 0
        else:
            result = RESULTS.get((player_choice, opponent_choice), None)

        if result == 1:  # user th·∫Øng
            user_data["money"] += bet
            if opponent:
                opp_data["money"] -= bet
            outcome_text = f"üéâ {interaction.user.mention} **th·∫Øng** v√† nh·∫≠n **+{bet:,} xu**!"
            color = discord.Color.green()
        elif result == 2:  # ƒë·ªëi th·ªß th·∫Øng
            user_data["money"] -= bet
            if opponent:
                opp_data["money"] += bet
            outcome_text = f"üíÄ {interaction.user.mention} **thua** v√† m·∫•t **-{bet:,} xu**!"
            color = discord.Color.red()
        else:  # ho√†
            outcome_text = "üòÖ Tr·∫≠n ƒë·∫•u **h√≤a**! Hai b√™n gi·ªØ nguy√™n ti·ªÅn."
            color = discord.Color.yellow()

        save_data()

        final_embed = discord.Embed(
            title="üìä K·∫øt Qu·∫£ K√©o - B√∫a - Bao",
            description=(
                f"üë§ {interaction.user.mention}: **{player_choice}**\n"
                f"ü§ñ {opponent.mention if opponent else 'Nh√† c√°i'}: **{opponent_choice}**\n\n"
                f"{outcome_text}\n\n"
                f"üí∞ S·ªë d∆∞ m·ªõi: **{user_data['money']:,} xu**"
            ),
            color=color
        )
        final_embed.set_footer(text="‚è≥ Tin nh·∫Øn s·∫Ω t·ª± x√≥a sau 30s.")

        await message.edit(content=None, embed=final_embed, view=None)
        await asyncio.sleep(30)
        try:
            await message.delete()
        except:
            pass

async def setup(bot: commands.Bot):
    await bot.add_cog(KeoBuaBao(bot))
